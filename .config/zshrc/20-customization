# -----------------------------------------------------
# Customization
# -----------------------------------------------------
POSH=agnoster

plugins=(
    archlinux
    aws
    copybuffer
    copyfile
    dirhistory
    fast-syntax-highlighting
    fnm
    gh
    git
    poetry
    poetry-env
    sudo
    #virtualenv
    web-search
    zsh-autosuggestions
    zsh-syntax-highlighting
)

# Set-up oh-my-zsh
source $ZSH/oh-my-zsh.sh

# -----------------------------------------------------
# Set-up FZF key bindings (CTRL R for fuzzy history finder)
# -----------------------------------------------------
source <(fzf --zsh)

# zsh history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

# -----------------------------------------------------
# Prompt
# -----------------------------------------------------
eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/zen.toml)"

# Shipped Theme
# eval "$(oh-my-posh init zsh --config /usr/share/oh-my-posh/themes/agnoster.omp.json)"

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

function otp() {
    if [ "$1" = "aws" ]; then
        echo "Getting Ample Transfers AWS MFA.."
        local result="$(bw get totp 94b0901d-af45-4dff-9d5a-8adb9032586d)"
    else
        echo "try getting OTP for $1"
        local result="$(bw get totp $1)"
    fi
    notify-send "$result copied to clipboard."
    echo "$result"
    wl-copy $result
}

function uhypr() {
    if uwsm check may-start; then
        exec uwsm start hyprland.desktop
    fi
}

function reset_hyprlock() {
    killall -9 hyprlock
    hyprctl --instance 0 'keyword misc:allow_session_lock_restore 1'
    sleep 1
    hyprctl --instance 0 'dispatch exec hyprlock'
}

function csv() {
    if [ -z "$1" ]; then
        echo "Usage: csv <file>"
        return 1
    fi
    gum table -p -s, -brounded < "$1" | less -#2 -N -S
}

function notif_his() {
    dunstctl history | jq "[.data[] | reverse .[] | {topic: .summary.data, message: .body.data, app: .appname.data, id: .id.data}]"
}

function ffo() {
    OPENER='if [[ $FZF_SELECT_COUNT -eq 0 ]]; then
            nvim {1}     # No selection. Open the current line in Vim.
          else
            nvim +cw -q {+f}  # Build quickfix list for the selected items.
          fi'
    fzf --ansi --multi \
        --bind "enter:become:$OPENER" \
        --bind "ctrl-o:execute:$OPENER" \
        --bind 'alt-a:select-all,alt-d:deselect-all,ctrl-/:toggle-preview' \
        --delimiter : \
        --preview 'bat --style=full --color=always {}' \
        --preview-window '<80(up)' \
        --query "$*"
}

# ripgrep->fzf->vim [QUERY]
function fwo() {
    RELOAD="reload:rg --hidden --glob '!.git/' --column --color=always --smart-case {q} || :"
    OPENER='if [[ $FZF_SELECT_COUNT -eq 0 ]]; then
                nvim {1} +{2}     # No selection. Open the current line in Vim.
            else
                nvim +cw -q {+f}  # Build quickfix list for the selected items.
            fi'
    fzf --disabled --ansi --multi \
        --bind "start:$RELOAD" \
        --bind "change:$RELOAD" \
        --bind "enter:become:$OPENER" \
        --bind "ctrl-o:execute:$OPENER" \
        --bind 'alt-a:select-all,alt-d:deselect-all,ctrl-/:toggle-preview' \
        --delimiter : \
        --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
        --preview-window '~4,+{2}+4/3,<80(up)' \
        --query "$*"
}

function spell() {
    local word
    if [ -n "$1" ]; then
        word=$(cat "$HOME/Documents/words.txt" | fzf --height 30% --layout reverse --border --query "$1" | sed 's/[[:space:]]//g')
    else
        word=$(cat "$HOME/Documents/words.txt" | fzf --height 30% --layout reverse --border | sed 's/[[:space:]]//g')
    fi
    echo "'$word' copied to clipboard"
    wl-copy $word
}
